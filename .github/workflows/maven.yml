# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
#  push:
#    branches: [ "dev" ]
#  pull_request:
#    branches: [ "dev" ] 
#  workflow_dispatch:
#    inputs:
#      logLevel:
#        description: 'Log level'
#        required: true
#       default: 'warning'
#        type: choice
#        options:
#        - info
#        - warning
#        - debug
#      tags:
#        description: 'Test scenario tags'
#        required: false
#        type: boolean
#      environment:
#        description: 'Environment to run tests against'
#        type: environment
#        required: false
  workflow_call:
    inputs:
      CI_ENV:
        required: true
        type: string
      CONTENTFUL_ENVIRONMENT:
        required: true
        type: string
      ECR_REPOSITORY:
         required: true
         type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_DEFAULT_REGION:
        required: true
      AWS_SESSION_TOKEN:
        required: true
      S3_ORIGIN_BUCKET:
        required: true
  

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    #- name: Build Docker Image
    #  run: docker build -t payments-service:${{ github.sha }} .
    

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    #- name: Update dependency graph
    #  uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
    
    # agrego los siguientes pasos para probar integraci√≥n con AWS
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{secrets.AWS_DEFAULT_REGION}}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
  
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}    
        IMAGE_TAG: imagen_pagos
      run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    
    - name: S3 Deploy
      run: ./.github/scripts/deploy.sh
      shell: bash
      env:
        S3_ORIGIN_BUCKET: ${{ secrets.S3_ORIGIN_BUCKET }}
